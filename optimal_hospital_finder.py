# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OptimalHospitalLocations
                                 A QGIS plugin
 it helps one find theoptimal location for pcs
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-30
        git sha              : $Format:%H$
        copyright            : (C) 2024 by GISG
        email                : vicky22@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import QgsVectorLayer, QgsFeature, QgsGeometry, QgsField, QgsProject, QgsVectorFileWriter, Qgis
from qgis.PyQt.QtCore import QVariant
import os

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .optimal_hospital_finder_dialog import OptimalHospitalLocationsDialog
import os.path


class OptimalHospitalLocations:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'OptimalHospitalLocations_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&optimal_hospital')

        # Initialize the dialog
        self.dlg = OptimalHospitalLocationsDialog()

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('OptimalHospitalLocations', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/optimal_hospital_finder/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&optimal_hospital'),
                action)
            self.iface.removeToolBarIcon(action)


    def get_cities(self, table_name):
        """Retrieve a list of cities from the specified table."""
        cities = []

        try:
            # Define the connection URI
            uri = (
                f"dbname='hospital_locations' host='localhost' port='5432' "
                f"user='postgres' password='' table=\"{table_name}\" (geom)"
            )

            # Load the table as a QgsVectorLayer
            city_layer = QgsVectorLayer(uri, table_name, "postgres")

            if not city_layer.isValid():
                raise ValueError(f"Layer for table '{table_name}' could not be loaded. "
                                 "Check the table name and database connection.")

            # Extract city names
            for feature in city_layer.getFeatures():
                cities.append(feature["adm2_en"])

            return cities

        except Exception as e:
            # Push error to QGIS message bar
            self.iface.messageBar().pushMessage(
                "Error",
                f"Failed to retrieve cities: {str(e)}",
                level=Qgis.Critical,
                duration=5
            )
            return []



    def run(self):
        """Run method to start the plugin."""
        try:
            # Populate comboBox with city names
            self.dlg.comboBox.clear()
            cities = self.get_cities("mw_cities")
            self.dlg.comboBox.addItems(cities)
        except Exception as e:
            QMessageBox.critical(self.iface.mainWindow(), "Error", f"An error occurred: {str(e)}")

        # Show the dialog to the user
        self.dlg.show()
        if self.dlg.exec_():
            try:
                # Get spin box values
                spinbox_value = self.dlg.spinBox.value()
                
                # Get the selected city
                selected_city = self.dlg.comboBox.currentText()

                # Call the buffer and difference operation function
                self.create_buffer_and_difference(selected_city, spinbox_value)
                
                QMessageBox.information(self.iface.mainWindow(), "Success", "Buffer and difference operation completed.")

            except Exception as e:
                QMessageBox.critical(self.iface.mainWindow(), "Error", f"Error during operation: {str(e)}")
    
    def create_buffer_and_difference(self, selected_city, buffer_distance):
        """Creates buffers on city_rivers within the selected city polygon and performs a difference operation."""
        try:
            # Get the city polygon for the selected city
            city_polygon = self.get_city_polygon(selected_city)
            if city_polygon is None:
                raise ValueError(f"No polygon found for city: {selected_city}")

            # Get the city rivers features within the selected city
            city_rivers = self.get_city_rivers_features(city_polygon)
            if not city_rivers:
                raise ValueError(f"No rivers found for city: {selected_city}")

            # Create buffers on the city rivers
            buffered_rivers = []
            for river in city_rivers:
                buffered_rivers.append(river.geometry().buffer(buffer_distance, 5))  # Buffer by the selected distance

            # Perform the difference operation (areas outside the buffer)
            result_features = []
            for river, buffered_river in zip(city_rivers, buffered_rivers):
                difference = river.geometry().difference(buffered_river)
                
                # Ensure the geometry is valid before proceeding
                if difference and difference.isValid():
                    result_feature = QgsFeature()
                    result_feature.setGeometry(difference)
                    result_features.append(result_feature)

            # Create a memory layer for the result
            result_layer = QgsVectorLayer("Polygon?crs=EPSG:4326", "DifferenceResult", "memory")
            provider = result_layer.dataProvider()
            
            # Add a field to store the geometry and ID
            provider.addAttributes([QgsField("id", QVariant.Int)])
            result_layer.updateFields()

            # Add the result features to the memory layer
            provider.addFeatures(result_features)

            # Add the result layer to the QGIS project
            QgsProject.instance().addMapLayer(result_layer)

        except Exception as e:
            self.iface.messageBar().pushMessage(
                "Error",
                f"Failed to perform buffer and difference operation: {str(e)}",
                level=Qgis.Critical,
                duration=5
            )

    def get_city_polygon(self, selected_city):
        """Retrieve the polygon for the selected city."""
        try:
            # Connection to the database for fetching the city polygon
            uri = f"dbname='hospital_locations' host='localhost' port='5432' user='postgres' password='' table=\"mw_cities\" (geom)"
            city_layer = QgsVectorLayer(uri, "mw_cities", "postgres")
            if not city_layer.isValid():
                raise ValueError(f"Layer for cities could not be loaded.")
            
            # Fetch the city polygon corresponding to the selected city
            city_polygon = None
            for feature in city_layer.getFeatures():
                if feature["adm2_en"] == selected_city:
                    city_polygon = feature
                    break

            return city_polygon
        except Exception as e:
            self.iface.messageBar().pushMessage(
                "Error",
                f"Failed to retrieve city polygon: {str(e)}",
                level=Qgis.Critical,
                duration=5
            )
            return None

    def get_city_rivers_features(self, selected_city):
        """Retrieve the city rivers features from the city_rivers table."""
        try:
            # Connection to the database for fetching the city rivers
            uri = f"dbname='hospital_locations' host='localhost' port='5432' user='postgres' password='' table=\"city_rivers\" (geom)"
            river_layer = QgsVectorLayer(uri, "city_rivers", "postgres")
            if not river_layer.isValid():
                raise ValueError(f"Layer for rivers could not be loaded.")
            
            # Fetch the river features within the selected city polygon
            city_rivers = []
            for feature in river_layer.getFeatures():
                if feature.geometry().intersects(selected_city.geometry()):
                    city_rivers.append(feature)

            return city_rivers
        except Exception as e:
            self.iface.messageBar().pushMessage(
                "Error",
                f"Failed to retrieve city rivers: {str(e)}",
                level=Qgis.Critical,
                duration=5
            )
            return []
